pipeline {
    agent any

    environment {
        CHROME_VERSION = '127.0.6533.73'    // Specific Chrome version
        CHROMEDRIVER_VERSION = '127.0.6533.72' // Matching ChromeDriver version
        CHROME_INSTALL_PATH = 'C:\\Program Files\\Google\\Chrome\\Application'
        CHROMEDRIVER_PATH = '"C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe"'
    }

    stages {

        stage('Checkout the code') {
            steps {
                git branch: 'master', url: 'https://github.com/antonDinkov/05-SeleniumIDE.git'
            }
        }

        stage('Set up .NET Core') {
            steps {
                bat '''
                    echo "Installing .NET SDK 6.0"
                    choco install dotnet-sdk -y --version=6.0.100
                '''
            }
        }

        stage('Uninstall current Chrome') {
            steps {
                bat '''
                    echo Uninstalling current Google Chrome
                    choco uninstall googlechrome -y || exit 0
                '''
            }
        }

        stage('Install specific version of Chrome') {
            steps {
                bat '''
                    echo "Installing Google Chrome version %CHROME_VERSION%"
                    choco install googlechrome --version=%CHROME_VERSION% -y --allow-downgrade --ignore-checksums
                '''
            }
        }

        stage('Download and install ChromeDriver') {
            steps {
                bat '''
                    echo "Downloading ChromeDriver version %CHROMEDRIVER_VERSION%"

                    powershell -command "Invoke-WebRequest -Uri https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%CHROMEDRIVER_VERSION%/win32/chromedriver-win32.zip -OutFile chromedriver.zip -UseBasicParsing"

                    powershell -command "Expand-Archive -Path chromedriver.zip -DestinationPath ."

                    powershell -command "Move-Item -Path .\\chromedriver-win32\\chromedriver.exe -Destination '%CHROME_INSTALL_PATH%\\chromedriver.exe' -Force"
                '''
            }
        }

        stage('Restore dependencies') {
            steps {
                bat 'dotnet restore SeleniumIde.sln'
            }
        }

        stage('Build') {
            steps {
                bat 'dotnet build SeleniumIde.sln --configuration Release'
            }
        }

        stage('Run tests') {
            steps {
                bat 'dotnet test --no-build --verbosity normal'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/TestResults/*.trx', allowEmptyArchive: true
            junit '**/TestResults/*.trx'
        }
    }
}